================= day2 05 =================

SMTP : simple mail transportation protocol
发送邮件的协议, 默认端口: 25

POP3 : post office protocol
接收邮件的协议, 默认端口: 110


================= day2 07 java mail =================

发送邮件:
pom:
<dependency>
	<groupId>javax.mail</groupId>
	<artifactId>javax.mail-api</artifactId>
	<version>1.5.5</version>
</dependency>

util类: (未通过测试)
package com.dataorta.testMail;

import javax.mail.Authenticator;
import javax.mail.Message;
import javax.mail.Message.RecipientType;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;

public class TestMailUtil {
	public static void sendMail (String mailReceiver, String activeCode){
		
		Properties props = new Properties();
		Session session = Session.getInstance(props, new Authenticator(){

			protected PasswordAuthentication getPasswordAuthentication(){
				return new PasswordAuthentication("service@store.com", "password123");
			}
		});
		
		Message message = new MIMEMessage(session);
		
		try{
			message.setFrom(new InternetAddress("service@store.com"));
			message.addRecipient(RecipientType.TO, new InternetAddress(mailReceiver));
			message.setSubject("mail subject");
			message.setContent("<a href='http://localhost:8080/store/UserServlet?method=active&code=" + activeCode + "'>激活</a>");
			
			Transport.send(message);
		} catch(Exception e){
			e.printStackTrace();
		}
	}
}

调用发送:
package com.dataorta.testMail;

public class TestMailMain {
	public static void main(String[] args) {
		TestMailUtil.sendMail("dest@mail.com", "code");
	}
}


================= day5 04-05 nginx+tomcat集群 =================

一个tomcat实例能处理大约400个并发访问量

# 安装 tomcat和nginx
复制3份tomcat, 起名例如: tomcat1, tomcat2, tomcat3
修改 .\conf\server.xml三处至例如:
<Connector port="8081" protocol="HTTP/1.1"
		   connectionTimeout="20000"
		   redirectPort="8443" />
			   
<Server port="8001" shutdown="SHUTDOWN">

<Connector port="8011" protocol="AJP/1.3" redirectPort="8443" />

解压nginx, 运行nginx.exe启动, 窗口一闪而过
cmd中 nginx -s stop 关闭进程 (注意需要配置path)
重启: nginx -s reload

浏览器访问: localhost

# 配置 nginx
编辑 .\conf\nginx.conf
http {
	# 添加该项目, 列表中内容按照实际情况调整
	upstream server_list {
		server localhost:8081;
		server localhost:8082;
		server localhost:8083;
	}
	
	# 按实际需求调整端口和server_name
	server {
        listen       80;
        server_name  localhost;
	}

	# 添加反向代理列表
	location / {
		root   html;
		proxy_pass http://server_list;
		index  index.html index.htm;
	}

# 启动集群
分别启动tomcat
按照nginx中配置启动nginx， 本例中： localhost

存放一份测试jsp在合适位置， 例如test下：
<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Insert title here</title>
</head>
<body>
<h2>Hello Tomcat1!<br/><%=session.getId() %></h2>
</body>
</html>
每次访问localhost/test时, 发现使用不同的tomcat及不同sessionid


================= day5 06 session共享 =================

# tomcat的session广播方式:
如下修改 .\conf\server.xml
<Engine name="Catalina" defaultHost="localhost" jvmRoute="tomcat1">
	<Cluster className="org.apache.catalina.ha.tcp.SimpleTcpCluster"/>

访问页面时, sessionid后多jvmRoute标识符, session还是不同

# 修改项目的web.xml配置, 添加<distributable/>标签
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">
  <distributable/>

发布到所有的tomcat中, 此时session相同, jvmRoute标识不同


================= day5 08 linux下部署nginx+tomcat集群 =================

linux下需要编译

# ubuntu/centos安装编译库:


gcc-c++:
sudo apt-get install libtool 
sudo apt-get install gcc-c++ 
yum install gcc-c++


PCRE:
yum install -y pcre pcre-devel


zlib:
sudo apt-get install openssl libssl-dev libperl-dev
yum install -y zlib zlib-devel

openssl:
yum install -y openssl openssl-devel


# 编译
./configure
make
make install



在sbin目录下 ./nginx


# linux下不能用session广播方式共享, 需要用memcache或者redis

